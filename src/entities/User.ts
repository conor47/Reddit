// This file was generated by running the command typeorm init --database postgres

// In typeORM entities are like models 

import { IsEmail, Length } from "class-validator";
import {Entity as ToEntity, Column, Index, BeforeInsert} from "typeorm";
import bcrypt from 'bcrypt'
import { Exclude} from 'class-transformer'

// we import our abstract entity which we will extend
import Entity from "./Entity"

@ToEntity('users')
export default class User extends Entity {

    // in a partial , some of the fields are allowed to be nullable
    constructor(user: Partial<User>){
        super()
        Object.assign(this,user)
    }

    // adds an index on these fields which improves performance when querying the database
    @Index()
    @IsEmail()
    @Column({unique:true})
    email : string

    @Index()
    @Length(3, 255, {message : "Username must be atleast 3 characters long"})
    @Column({unique:true})
    username : string

    @Exclude()
    @Column()
    @Length(6,255)
    password : string

    // this will run before the entity is inserted into the database. We are hashing the passwords
    // using bcrypt 
    @BeforeInsert()
    async hashPassword(){
        this.password = await bcrypt.hash(this.password, 6)
    }

}
